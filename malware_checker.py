import argparse, hashlib, requests, os, json

# [KASPERSKY SCANNER]
# email = "jagiwak760@get2israel.com"
# password = "jagiwak760@get2israel.comA"

class Malware_checker:
    api_token = "7QXvdZ8tTHeBDueVqpOsoA=="
    def __init__(self, **kwargs):
        self.config = kwargs

    def mode_file_checker(self):
        checksum = self.__file_checksum(self.config.get("filename"))
        self.info_file = [
            (
                self.config.get("filename"),
                checksum,
                self.__query_to_online_scanner(checksum)['FileGeneralInfo']['FileStatus']
            )
        ]

    def mode_folder_checker(self):
        filename_with_checksums = self.__files_from_folder_checksums(
            self.config.get("foldername")+"/" if self.config.get("foldername")[-1]!="/" else self.config.get("foldername")
        )
        self.info_file = [
            (
                filename_with_checksums[i][0],
                filename_with_checksums[i][1],
                self.__query_to_online_scanner(filename_with_checksums[i][1])['FileGeneralInfo']['FileStatus'], 
            )
            for i in range(len(filename_with_checksums))
        ]

    def mode_hashlist_checker(self):
        self.info_file = []
        with open(self.config.get("listname")) as f:
            while True:
                checksum = f.readline().strip()
                if checksum == "": break
                self.info_file.append(
                    (
                        checksum,
                        self.__query_to_online_scanner(checksum)["FileGeneralInfo"]["FileStatus"]
                    )
                )

    def __file_checksum(self, filename: str) -> str:
        checksum = hashlib.sha256(open(filename, "rb").read()).hexdigest()
        return checksum

    def __files_from_folder_checksums(self, foldername: str) -> tuple:
        files_checksums = tuple(
            (filename, self.__file_checksum(foldername+filename))
            for filename in os.listdir(foldername)
            if os.path.isfile(foldername+filename)
        )
        return files_checksums

    def __query_to_online_scanner(self, checksum: str) -> dict:
        response = requests.get("https://opentip.kaspersky.com/api/v1/search/hash?request="+checksum, 
            headers={
                "x-api-key":self.api_token
            }
        ).text
        if response != "":
            return json.loads(response)
        return {'FileGeneralInfo':{'FileStatus':"Unknow"}}

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    required = parser.add_argument_group("One of them is required")
    required.add_argument("-f", metavar="filename", help="file to scan")
    required.add_argument("-d", metavar="folder", help="folder to scan")
    required.add_argument("-l", metavar="checksum_list", help="file with list of checksum from files to scan")
    parser.add_argument("-o", metavar="output", help="output to save informations in file")
    args = parser.parse_args()

    if args.f is not None:
        checker = Malware_checker(filename=args.f)
        checker.mode_file_checker()
        filename, sha256sum, status = checker.info_file[0]
        print(f"Filename: {filename}\nSHA256: {sha256sum}\nStatus: {status} ")
    elif args.d is not None:
        checker = Malware_checker(foldername=args.d)
        checker.mode_folder_checker()
        for filename, sha256sum, status in checker.info_file:
            print(f"Filename: {filename}\nSHA256: {sha256sum}\nStatus: {status}\n")
    elif args.l is not None:
        checker = Malware_checker(listname=args.l)
        checker.mode_hashlist_checker()
        for checksum, status in checker.info_file:
            print(f"HASH: {checksum}\nStatus: {status}\n")

    if args.o is not None and (args.f or args.d or args.f):
        with open(args.o, "w") as f:
            for i in range(len(checker.info_file)):
                f.write(":".join(checker.info_file[i])+"\n")
    
    if any([args.f, args.d, args.l]) is False: parser.print_help()